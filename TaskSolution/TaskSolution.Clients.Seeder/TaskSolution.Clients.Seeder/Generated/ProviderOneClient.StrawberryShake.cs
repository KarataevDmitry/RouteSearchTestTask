// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public static partial class ProviderOneClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::TaskSolution.Clients.Seeder.State.ProviderOneClientStoreAccessor> AddProviderOneClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::TaskSolution.Clients.Seeder.State.ProviderOneClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TaskSolution.Clients.Seeder.GetTravelRoutesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TaskSolution.Clients.Seeder.ProviderOneClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TaskSolution.Clients.Seeder.IProviderOneClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::TaskSolution.Clients.Seeder.State.ProviderOneClientStoreAccessor>("ProviderOneClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ProviderOneClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::TaskSolution.Clients.Seeder.State.TravelRouteEntity, global::TaskSolution.Clients.Seeder.GetTravelRoutes_TravelRoutes_TravelRoute>, global::TaskSolution.Clients.Seeder.State.GetTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>, global::TaskSolution.Clients.Seeder.State.GetTravelRoutesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>, global::TaskSolution.Clients.Seeder.State.GetTravelRoutesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TaskSolution.Clients.Seeder.GetTravelRoutesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TaskSolution.Clients.Seeder.GetTravelRoutesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::TaskSolution.Clients.Seeder.State.ProviderOneClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TaskSolution.Clients.Seeder.ProviderOneClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TaskSolution.Clients.Seeder.IProviderOneClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TaskSolution.Clients.Seeder.ProviderOneClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace TaskSolution.Clients.Seeder
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutesResult : global::System.IEquatable<GetTravelRoutesResult>, IGetTravelRoutesResult
    {
        public GetTravelRoutesResult(global::System.Collections.Generic.IReadOnlyList<global::TaskSolution.Clients.Seeder.IGetTravelRoutes_TravelRoutes> travelRoutes)
        {
            TravelRoutes = travelRoutes;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::TaskSolution.Clients.Seeder.IGetTravelRoutes_TravelRoutes> TravelRoutes { get; }

        public virtual global::System.Boolean Equals(GetTravelRoutesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(TravelRoutes, other.TravelRoutes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTravelRoutesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var TravelRoutes_elm in TravelRoutes)
                {
                    hash ^= 397 * TravelRoutes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutes_TravelRoutes_TravelRoute : global::System.IEquatable<GetTravelRoutes_TravelRoutes_TravelRoute>, IGetTravelRoutes_TravelRoutes_TravelRoute
    {
        public GetTravelRoutes_TravelRoutes_TravelRoute(global::System.String startPoint, global::System.String endPoint, global::System.DateTimeOffset startDateTimeUTC, global::System.DateTimeOffset arrivalDateTimeUTC, global::System.TimeSpan timeToLive, global::System.Int32 cost)
        {
            StartPoint = startPoint;
            EndPoint = endPoint;
            StartDateTimeUTC = startDateTimeUTC;
            ArrivalDateTimeUTC = arrivalDateTimeUTC;
            TimeToLive = timeToLive;
            Cost = cost;
        }

        public global::System.String StartPoint { get; }
        public global::System.String EndPoint { get; }
        public global::System.DateTimeOffset StartDateTimeUTC { get; }
        public global::System.DateTimeOffset ArrivalDateTimeUTC { get; }
        public global::System.TimeSpan TimeToLive { get; }
        public global::System.Int32 Cost { get; }

        public virtual global::System.Boolean Equals(GetTravelRoutes_TravelRoutes_TravelRoute? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (StartPoint.Equals(other.StartPoint)) && EndPoint.Equals(other.EndPoint) && StartDateTimeUTC.Equals(other.StartDateTimeUTC) && ArrivalDateTimeUTC.Equals(other.ArrivalDateTimeUTC) && TimeToLive.Equals(other.TimeToLive) && Cost == other.Cost;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTravelRoutes_TravelRoutes_TravelRoute)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * StartPoint.GetHashCode();
                hash ^= 397 * EndPoint.GetHashCode();
                hash ^= 397 * StartDateTimeUTC.GetHashCode();
                hash ^= 397 * ArrivalDateTimeUTC.GetHashCode();
                hash ^= 397 * TimeToLive.GetHashCode();
                hash ^= 397 * Cost.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetTravelRoutesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::TaskSolution.Clients.Seeder.IGetTravelRoutes_TravelRoutes> TravelRoutes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetTravelRoutes_TravelRoutes
    {
        public global::System.String StartPoint { get; }
        public global::System.String EndPoint { get; }
        public global::System.DateTimeOffset StartDateTimeUTC { get; }
        public global::System.DateTimeOffset ArrivalDateTimeUTC { get; }
        public global::System.TimeSpan TimeToLive { get; }
        public global::System.Int32 Cost { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetTravelRoutes_TravelRoutes_TravelRoute : IGetTravelRoutes_TravelRoutes
    {
    }

    /// <summary>
    /// Represents the operation service of the GetTravelRoutes GraphQL operation
    /// <code>
    /// query GetTravelRoutes {
    ///   travelRoutes {
    ///     __typename
    ///     startPoint
    ///     endPoint
    ///     startDateTimeUTC
    ///     arrivalDateTimeUTC
    ///     timeToLive
    ///     cost
    ///     ... on TravelRoute {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTravelRoutesQueryDocument()
        {
        }

        public static GetTravelRoutesQueryDocument Instance { get; } = new GetTravelRoutesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x54,
            0x72,
            0x61,
            0x76,
            0x65,
            0x6c,
            0x52,
            0x6f,
            0x75,
            0x74,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x74,
            0x72,
            0x61,
            0x76,
            0x65,
            0x6c,
            0x52,
            0x6f,
            0x75,
            0x74,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x65,
            0x6e,
            0x64,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x44,
            0x61,
            0x74,
            0x65,
            0x54,
            0x69,
            0x6d,
            0x65,
            0x55,
            0x54,
            0x43,
            0x20,
            0x61,
            0x72,
            0x72,
            0x69,
            0x76,
            0x61,
            0x6c,
            0x44,
            0x61,
            0x74,
            0x65,
            0x54,
            0x69,
            0x6d,
            0x65,
            0x55,
            0x54,
            0x43,
            0x20,
            0x74,
            0x69,
            0x6d,
            0x65,
            0x54,
            0x6f,
            0x4c,
            0x69,
            0x76,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x73,
            0x74,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x54,
            0x72,
            0x61,
            0x76,
            0x65,
            0x6c,
            0x52,
            0x6f,
            0x75,
            0x74,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a7176da1b4a867631e1a34134e6211d1");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTravelRoutes GraphQL operation
    /// <code>
    /// query GetTravelRoutes {
    ///   travelRoutes {
    ///     __typename
    ///     startPoint
    ///     endPoint
    ///     startDateTimeUTC
    ///     arrivalDateTimeUTC
    ///     timeToLive
    ///     cost
    ///     ... on TravelRoute {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutesQuery : global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTravelRoutesResult> _operationExecutor;
        public GetTravelRoutesQuery(global::StrawberryShake.IOperationExecutor<IGetTravelRoutesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTravelRoutesResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTravelRoutesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTravelRoutesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTravelRoutesQueryDocument.Instance.Hash.Value, name: "GetTravelRoutes", document: GetTravelRoutesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTravelRoutes GraphQL operation
    /// <code>
    /// query GetTravelRoutes {
    ///   travelRoutes {
    ///     __typename
    ///     startPoint
    ///     endPoint
    ///     startDateTimeUTC
    ///     arrivalDateTimeUTC
    ///     timeToLive
    ///     cost
    ///     ... on TravelRoute {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetTravelRoutesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTravelRoutesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTravelRoutesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ProviderOneClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class ProviderOneClient : global::TaskSolution.Clients.Seeder.IProviderOneClient
    {
        private readonly global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery _getTravelRoutes;
        public ProviderOneClient(global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery getTravelRoutes)
        {
            _getTravelRoutes = getTravelRoutes ?? throw new global::System.ArgumentNullException(nameof(getTravelRoutes));
        }

        public static global::System.String ClientName => "ProviderOneClient";
        public global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery GetTravelRoutes => _getTravelRoutes;
    }

    /// <summary>
    /// Represents the ProviderOneClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IProviderOneClient
    {
        global::TaskSolution.Clients.Seeder.IGetTravelRoutesQuery GetTravelRoutes { get; }
    }
}

namespace TaskSolution.Clients.Seeder.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class TravelRouteEntity
    {
        public TravelRouteEntity(global::System.String startPoint = default !, global::System.String endPoint = default !, global::System.DateTimeOffset startDateTimeUTC = default !, global::System.DateTimeOffset arrivalDateTimeUTC = default !, global::System.TimeSpan timeToLive = default !, global::System.Int32 cost = default !)
        {
            StartPoint = startPoint;
            EndPoint = endPoint;
            StartDateTimeUTC = startDateTimeUTC;
            ArrivalDateTimeUTC = arrivalDateTimeUTC;
            TimeToLive = timeToLive;
            Cost = cost;
        }

        public global::System.String StartPoint { get; }
        public global::System.String EndPoint { get; }
        public global::System.DateTimeOffset StartDateTimeUTC { get; }
        public global::System.DateTimeOffset ArrivalDateTimeUTC { get; }
        public global::System.TimeSpan TimeToLive { get; }
        public global::System.Int32 Cost { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TaskSolution.Clients.Seeder.GetTravelRoutesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::TaskSolution.Clients.Seeder.State.TravelRouteEntity, GetTravelRoutes_TravelRoutes_TravelRoute> _getTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper;
        public GetTravelRoutesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::TaskSolution.Clients.Seeder.State.TravelRouteEntity, GetTravelRoutes_TravelRoutes_TravelRoute> getTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper = getTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult);

        public GetTravelRoutesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTravelRoutesResultInfo info)
            {
                return new GetTravelRoutesResult(MapNonNullableIGetTravelRoutes_TravelRoutesNonNullableArray(info.TravelRoutes, snapshot));
            }

            throw new global::System.ArgumentException("GetTravelRoutesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TaskSolution.Clients.Seeder.IGetTravelRoutes_TravelRoutes> MapNonNullableIGetTravelRoutes_TravelRoutesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var travelRoutes = new global::System.Collections.Generic.List<global::TaskSolution.Clients.Seeder.IGetTravelRoutes_TravelRoutes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                travelRoutes.Add(MapNonNullableIGetTravelRoutes_TravelRoutes(child, snapshot));
            }

            return travelRoutes;
        }

        private global::TaskSolution.Clients.Seeder.IGetTravelRoutes_TravelRoutes MapNonNullableIGetTravelRoutes_TravelRoutes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("TravelRoute", global::System.StringComparison.Ordinal))
            {
                return _getTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper.Map(snapshot.GetEntity<global::TaskSolution.Clients.Seeder.State.TravelRouteEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetTravelRoutesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> travelRoutes, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            TravelRoutes = travelRoutes;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> TravelRoutes { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTravelRoutesResultInfo(TravelRoutes, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper : global::StrawberryShake.IEntityMapper<global::TaskSolution.Clients.Seeder.State.TravelRouteEntity, GetTravelRoutes_TravelRoutes_TravelRoute>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetTravelRoutes_TravelRoutes_TravelRouteFromTravelRouteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetTravelRoutes_TravelRoutes_TravelRoute Map(global::TaskSolution.Clients.Seeder.State.TravelRouteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetTravelRoutes_TravelRoutes_TravelRoute(entity.StartPoint, entity.EndPoint, entity.StartDateTimeUTC, entity.ArrivalDateTimeUTC, entity.TimeToLive, entity.Cost);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetTravelRoutesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.TimeSpan> _timeSpanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetTravelRoutesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TaskSolution.Clients.Seeder.IGetTravelRoutesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _timeSpanParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.TimeSpan>("TimeSpan") ?? throw new global::System.ArgumentException("No serializer for type `TimeSpan` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetTravelRoutesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetTravelRoutesResult Result, GetTravelRoutesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IGetTravelRoutesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetTravelRoutesResult, GetTravelRoutesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> travelRoutesId = default !;
            _entityStore.Update(session =>
            {
                travelRoutesId = UpdateNonNullableIGetTravelRoutes_TravelRoutesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "travelRoutes"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetTravelRoutesResultInfo(travelRoutesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetTravelRoutes_TravelRoutesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var travelRoutes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                travelRoutes.Add(UpdateNonNullableIGetTravelRoutes_TravelRoutesEntity(session, child, entityIds));
            }

            return travelRoutes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetTravelRoutes_TravelRoutesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("TravelRoute", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::TaskSolution.Clients.Seeder.State.TravelRouteEntity? entity))
                {
                    session.SetEntity(entityId, new global::TaskSolution.Clients.Seeder.State.TravelRouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startPoint")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endPoint")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDateTimeUTC")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "arrivalDateTimeUTC")), DeserializeNonNullableTimeSpan(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeToLive")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::TaskSolution.Clients.Seeder.State.TravelRouteEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startPoint")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endPoint")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDateTimeUTC")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "arrivalDateTimeUTC")), DeserializeNonNullableTimeSpan(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timeToLive")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.TimeSpan DeserializeNonNullableTimeSpan(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _timeSpanParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class ProviderOneClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "TravelRoute" => ParseTravelRouteEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "TravelRoute" => FormatTravelRouteEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseTravelRouteEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTravelRouteEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class ProviderOneClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ProviderOneClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
